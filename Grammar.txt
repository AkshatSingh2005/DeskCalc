start = {statement} end

statement = [expression | definition] (';' | '\n')

expression = term { ('+' | '-') term }

term = power { ('*' | '/' | '%' | 'mod' | 'div' | '||') power }

power = primary { ('^' | '**') primary }

primary = number 
		| variable 
		| number variable
		| (number '!') 
		| function_call 
		| '(' expression ')'

definition = function_definition | variable_definition

function_definition = identifier '(' parameter_list ')' '=' function_term

function_call = identifier '(' argument_list ')'

number = ? C++ double ?
complex_number = 'complex' identifier '=' '(' number ',' number ')'
identifier = letter {'_' | letter}			(* single '_' is reserved *)
variable = ? number stored by an identifier in context table ?